/*! marcelaviola.com 2024-08-01 */

(function(navigator) {
    if ("serviceWorker" in navigator) {
        navigator.serviceWorker.register("/service-worker.js", {
            scope: "/"
        }).then(function(reg) {
            console.log("Registration succeeded. Scope is " + reg.scope);
        }).catch(function(error) {
            console.log("Registration failed with " + error);
        });
    }
})(navigator);

!function(a) {
    "use strict";
    function b() {}
    b.prototype.on = function(a, b) {
        return this._collection = this._collection || {}, this._collection[a] = this._collection[a] || [], 
        this._collection[a].push(b), this;
    }, b.prototype.once = function(a, b) {
        function c() {
            d.off(a, c), b.apply(this, arguments);
        }
        var d = this;
        return c.listener = b, this.on(a, c), this;
    }, b.prototype.off = function(a, b) {
        var c = this._collection[a], d = 0;
        if (void 0 !== c) for (d; d < c.length; d += 1) if (c[d] === b || c[d].listener === b) {
            c.splice(d, 1);
            break;
        }
        return 0 === c.length && this.removeAllListeners(a), this;
    }, b.prototype.removeAllListeners = function(a) {
        return this._collection = this._collection || {}, delete this._collection[a], this;
    }, b.prototype.listeners = function(a) {
        return this._collection = this._collection || {}, this._collection[a];
    }, b.prototype.emit = function() {
        if (void 0 === this._collection) return this;
        var a, b = [].slice.call(arguments, 0), c = b.shift(), d = this._collection[c], e = 0;
        if (d) for (d = d.slice(0), a = d.length, e; a > e; e += 1) d[e].apply(this, b);
        return this;
    }, "function" == typeof a.define && void 0 !== a.define.amd ? a.define("Jvent", [], function() {
        return b;
    }) : "undefined" != typeof module && void 0 !== module.exports ? module.exports = b : a.Jvent = b;
}(this);

(function(window) {
    "use strict";
    var win = window, doc = win.document, docEl = doc.documentElement, Jvent = win.Jvent, on = win.addEventListener || win.attachEvent, RESIZE = on === win.attachEvent ? "onresize" : "resize", SCROLL = on === win.attachEvent ? "onscroll" : "scroll", resized = false, scrolled = false, requestAnimFrame = function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
            window.setTimeout(callback, 1e3 / 60);
        };
    }();
    function update() {
        if (!resized && !scrolled) {
            return;
        }
        var eve = resized ? "resize" : "scroll";
        this.refresh();
        resized = false;
        scrolled = false;
        this.emit(eve);
    }
    on(RESIZE, function() {
        resized = true;
    });
    on(SCROLL, function() {
        scrolled = true;
    });
    function Viewport() {
        if (!(this instanceof Viewport) && Viewport.getInstance === undefined) {
            return new Viewport();
        }
        if (Viewport.getInstance) {
            return Viewport.getInstance;
        }
        this.init();
        return this;
    }
    Viewport.prototype = new Jvent();
    Viewport.prototype.init = function() {
        var that = this;
        that.refresh();
        that.calculateDeviceDimensions();
        (function updateloop() {
            requestAnimFrame(updateloop);
            update.call(that);
        })();
        Viewport.getInstance = this;
        return this;
    };
    Viewport.prototype.device = {};
    Viewport.prototype.calculateDimensions = function() {
        this.height = docEl.clientHeight;
        this.width = docEl.clientWidth;
        return this;
    };
    Viewport.prototype.calculateDeviceDimensions = function() {
        this.device.height = win.screen.height;
        this.device.width = win.screen.width;
        return this;
    };
    Viewport.prototype.calculateScroll = function() {
        var cachedTop = this.scrollY, cachedBottom = this.height + cachedTop, bottom;
        this.scrollY = win.pageYOffset || docEl.scrollTop;
        this.scrollX = win.pageXOffset || docEl.scrollLeft;
        bottom = this.height + this.scrollY;
        if (cachedTop !== this.scrollY && this.scrollY === 0) {
            this.emit("top");
        } else if (cachedBottom !== bottom && bottom >= doc.body.scrollHeight) {
            this.emit("bottom");
        }
        return this;
    };
    Viewport.prototype.calculateOffset = function() {
        this.top = this.scrollY;
        this.right = this.scrollX + this.width;
        this.bottom = this.scrollY + this.height;
        this.left = this.scrollX;
        return this;
    };
    Viewport.prototype.calculateMousePostition = function(eve) {
        var coordX = 0, coordY = 0;
        eve = eve || window.event;
        if (eve.pageX || eve.pageY) {
            coordX = eve.pageX;
            coordY = eve.pageY;
        } else {
            coordX = eve.clientX + doc.body.scrollLeft + docEl.scrollLeft;
            coordY = eve.clientY + doc.body.scrollTop + docEl.scrollTop;
        }
        return {
            posX: coordX,
            posY: coordY
        };
    };
    Viewport.prototype.calculateOrientation = function() {
        this.orientation = Math.abs(win.orientation) === 90 ? "landscape" : "portrait";
        return this;
    };
    Viewport.prototype.inViewport = function(el) {
        var r = el.getBoundingClientRect();
        return r.top >= 0 && r.right <= this.width && r.bottom <= this.height && r.left >= 0;
    };
    Viewport.prototype.isVisible = function(el) {
        var r = el.getBoundingClientRect();
        return r.bottom >= 0 && r.top <= this.height;
    };
    Viewport.prototype.refresh = function() {
        this.calculateDimensions();
        this.calculateScroll();
        this.calculateOffset();
        this.calculateOrientation();
        return this;
    };
    if (typeof window.define === "function" && window.define.amd !== undefined) {
        window.define("viewport", [], function() {
            return new Viewport();
        });
    } else if (typeof module !== "undefined" && module.exports !== undefined) {
        module.exports = new Viewport();
    } else {
        window.viewport = new Viewport();
    }
})(this);

(function() {
    var lastTime = 0;
    var vendors = [ "webkit", "moz" ];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
        window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
    }
    if (!window.requestAnimationFrame) window.requestAnimationFrame = function(callback, element) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function() {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };
    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function(id) {
        clearTimeout(id);
    };
})();

(function(window, document) {
    var RITHM = 1e3 * 4;
    var FADE_TIMEOUT = 500;
    var FadeElement = function($img) {
        this.src = $img.src;
        this.baseClassName = $img.className;
        this.element = $img;
        return this;
    };
    FadeElement.prototype.fadeIn = function() {
        var $this = this;
        window.setTimeout(function() {
            if ($this.element) {
                $this.element.className = $this.baseClassName + " fade-in";
            }
        }, FADE_TIMEOUT);
        return $this;
    };
    FadeElement.prototype.fadeOut = function() {
        var $this = this;
        window.setTimeout(function() {
            if ($this.element) {
                $this.element.className = $this.baseClassName + " fade-out";
            }
        }, FADE_TIMEOUT);
        return $this;
    };
    FadeElement.prototype.reset = function() {
        var $this = this;
        if ($this.element) {
            $this.element.className = $this.baseClassName;
        }
        return $this;
    };
    FadeElement.prototype.prepare = function() {
        var $this = this;
        if ($this.element) {
            $this.element.className = $this.baseClassName + " prepare";
        }
        return $this;
    };
    function Orchestrator(window, document) {
        var orchestra = [];
        var $faders = document.querySelectorAll(".fader");
        for (var i = 0, $fader, len = $faders.length; i < len; i += 1) {
            $fader = $faders[i];
            var $figure = $fader.querySelectorAll("figure");
            var $imgs = $fader.getElementsByTagName("img");
            for (var i = 0, len = $imgs.length; i < len; i += 1) {
                orchestra[i] = new FadeElement($imgs[i]);
            }
        }
        var iterator, iteration = 0, prev_iteration, next_iteration;
        var $element, $prev_element, $next_element, $last_element;
        function iterate() {
            clearTimeout(iterator);
            if (iteration === orchestra.length) {
                iteration = 0;
                return iterator = setTimeout(iterate, RITHM || 4e3);
            }
            next_iteration = iteration + 1 === orchestra.length ? 0 : iteration + 1;
            prev_iteration = iteration === 0 ? orchestra.length - 1 : iteration - 1;
            last_iteration = orchestra.length - 2 === 0 ? orchestra.length - 2 : iteration - 2;
            $element = orchestra[iteration];
            $prev_element = orchestra[prev_iteration];
            $next_element = orchestra[next_iteration];
            $last_element = orchestra[last_iteration];
            if ($last_element) {
                $last_element.reset();
            }
            $prev_element.fadeOut();
            $element.fadeIn();
            $next_element.prepare();
            iteration += 1;
            iterator = setTimeout(function() {
                requestAnimationFrame(iterate);
            }, RITHM || 4e3);
        }
        requestAnimationFrame(iterate);
    }
    Orchestrator(window, document);
})(window, document);

(function(window, document) {
    var nav, toggler;
    function toggle(event) {
        var anchor = event.target;
        while (!anchor.className) {
            if (anchor === this) {
                break;
            }
            anchor = anchor.parentNode;
        }
        if (/open/.test(anchor.className)) {
            nav.className = "global";
            anchor.className = "toggler";
        } else {
            nav.className = "global open";
            anchor.className = "toggler open";
        }
    }
    function Orchestrator(window, document) {
        nav = document.getElementById("top");
        toggler = document.querySelector(".toggler");
        toggler.addEventListener("click", toggle);
    }
    Orchestrator(window, document);
})(window, document);

(function(window, document) {
    "use strict";
    var viewport = window.viewport;
    var ImageElement = function($img) {
        var $this = this;
        $this.src = $img.src;
        $this.element = $img;
        $this.element.setAttribute("data-state", "created");
        $this.meta = {
            isVisible: false,
            isMobile: true,
            isVertical: true,
            verticalPosFix: "_v",
            verticalEdge: 414
        };
        $this.baseClassName = $img.className;
        $this.highResSrc = $img.getAttribute("data-highres");
        if (!$this.highResSrc) {
            return $this;
        }
        $this.resolve();
        if (viewport !== "undefined") {
            viewport.on("scroll", function() {
                $this.resolve.call($this, this);
            });
            viewport.on("resize", function() {
                $this.resolve.call($this, this);
            });
        }
        return $this;
    };
    ImageElement.prototype.isVisible = function() {
        var $this = this;
        $this.meta.isVisible = typeof viewport.isVisible === "function" && viewport.isVisible($this.element);
        return $this.meta.isVisible;
    };
    ImageElement.prototype.isMobile = function() {
        var $this = this;
        $this.meta.isMobile = /Mobi/.test(navigator.userAgent);
        return $this.meta.isMobile;
    };
    ImageElement.prototype.isHero = function() {
        var $this = this;
        return /hero/.test($this.src);
    };
    ImageElement.prototype.isVertical = function() {
        var $this = this;
        $this.meta.isVertical = false;
        if (typeof viewport !== "undefined") {
            viewport.calculateDeviceDimensions();
            $this.meta.isVertical = viewport.height > viewport.width;
        }
        return $this.meta.isVertical;
    };
    ImageElement.prototype.resolve = function() {
        var $this = this;
        if (viewport.isVisible($this.element)) {
            $this.useHighRes();
        }
        return $this;
    };
    ImageElement.prototype.updateSrc = function() {
        var $this = this;
        if ($this.src === $this.element.src) {
            return $this;
        }
        $this.element.setAttribute("data-state", "loading");
        if ($this.isHero() && ($this.isMobile() || $this.isVertical())) {
            $this.src = $this.src.replace(".", $this.meta.verticalPosFix + ".");
        }
        var preload = new Image();
        preload.src = $this.src;
        preload.onload = function() {
            preload = null;
            $this.element.src = $this.src;
            $this.element.setAttribute("data-state", "ready");
        };
        return $this;
    };
    ImageElement.prototype.useHighRes = function() {
        var $this = this;
        if ($this.highResSrc) {
            $this.src = $this.highResSrc;
            $this.updateSrc();
        }
        return $this;
    };
    function Orchestrator(window, document) {
        var i, $img, $imgs = document.getElementsByTagName("img");
        for (i = 0; i < $imgs.length; i += 1) {
            $img = $imgs[i];
            if (!$img.getAttribute("data-highres")) {
                continue;
            }
            new ImageElement($img);
        }
    }
    Orchestrator(window, document);
})(window, document);
//# sourceMappingURL=marcelaviola.com.min.js.map